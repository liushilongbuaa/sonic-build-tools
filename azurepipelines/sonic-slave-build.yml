pr: none
trigger: none
schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - internal
  always: true

parameters:
  # input github branch first, ms branch second.
  - name: 'branch_list'
    type: string
    default: 'master internal 202012 internal-202012 201811 internal-201811 202106 internal-202106'
    values:
      - 'master internal 202012 internal-202012 201811 internal-201811 202106 internal-202106'
      - 'master internal'
      - '202012 internal-202012'
      - '201811 internal-201811'
      - '202106 internal-202106'
  - name: 'ms_repo_url_tail'
    type: string
    default: 'msazure.visualstudio.com/One/_git/Networking-acs-buildimage'
    values:
      - 'msazure.visualstudio.com/One/_git/Networking-acs-buildimage'
      - 'msazure.visualstudio.com/One/_git/Networking-acs-sonic-mgmt'
  - name: 'git_repo_url_tail'
    type: string
    default: 'github.com/Azure/sonic-buildimage'
    values:
      - 'github.com/Azure/sonic-buildimage'
      - 'github.com/Azure/sonic-mgmt'
  - name: 'base_repo'
    type: string
    values:
      - git
      - ms
  - name: exec_push
    type: string
    values:
      - yes
      - no
    default: no

# input in variables: ms_token, git_token
variables:
  - name: ms_repo_url
    value: https://$(ms_token)$(ms_repo_url_tail)
  - name: git_repo_url
    value: https://$(git_token)$(git_repo_url_tail)
  - ${{ if eq(variables['base_repo'], 'git') }}:
    - name: base_url
      value: $(git_repo_url)
    - name: target_url
      value: $(ms_repo_url)
  - ${{ if eq(variables['base_repo'], 'ms') }}:
    - name: base_url
      value: $(ms_repo_url)
    - name: target_url
      value: $(git_repo_url)

jobs:
  - job: code_merge
    pool:
      vmimage: ubuntu-20.04
    timeoutInMinutes: 10
    steps:
      - bash: |
          env
          exit 1
          FAILED=""
          merge(){
            base_branch=$1
            target_branch=$2
            echo "=== Merging branch -${msazure-branch}- -${github-branch}- ... ==="
            if [ -d sonic-buildimage ];then
              rm -rf sonic-buildimage || {echo "=== FATAL: rm -rf sonic-buildimage failed ==="; exit 1}
            fi
            mkdir sonic-buildimage
            cd sonic-buildimage
            git init
            git config --global user.email "svc-acs@microsoft.com"
            git config --global user.name "Sonic Automation"
            git remote add base $(base_url)
            git remote add target $(target_url)
            git remote update
            git checkout -b base_$msazure-branch --track msazure/$msazure-branch
            curr_tag=`git tag --contains HEAD`
            if [[ -z ${curr_tag} ]];then
              curr_tag="${msazure-branch}-`date '+%Y%m%d-%H%M'`.pre-merge"
              echo "Add a tag ${curr_tag} to current ${msazure-branch} before merging ..."
              git tag ${curr_tag}
              RC=0
              git push msazure ${curr_tag} || RC=$?
              if [[ ${RC} != 0 ]];then
                return 11
              fi
            fi

            post_tag="${msazure-branch}-`date '+%Y%m%d-%H%M'`.post-merge"
            RC=0
            git pull azure $github-branch --no-edit || RC=$?
            if [[ ${RC} != 0 ]];then
              return 12
            fi

            head_tag=`git tag --contains HEAD`
            if [[ ${head_tag} == ${curr_tag} ]];then
              echo "No change after rebasing ..."
            else
              echo "Add a tag ${post_tag} to current ${msazure-branch} after merging ..."
              git tag ${post_tag}
              RC=0
              git push msazure ${post_tag} || RC=$?
              if [[ ${RC} != 0 ]];then
                return 13
              fi
              git push msazure ${msazure-branch}
            fi
          }
          main(){
            while [[ $# > 1 ]];do
              if [[ $(base_repo) == 'git' ]];then
                base_branch=$1
                target_branch=$2
              else
                base_branch=$2
                target_branch=$1
              fi
              merge $base_branch $target_branch || FAILED="${FAILED} $base_branch"
              shift 2
            done
            if [[ -n ${FAILED} ]];then
              echo "Failed to merge following public branches: ${FAILED} ..."
              exit 10
            fi
          }
          main ${{ parameters.input }}
